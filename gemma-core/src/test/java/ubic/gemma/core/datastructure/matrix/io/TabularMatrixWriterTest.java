package ubic.gemma.core.datastructure.matrix.io;

import org.junit.Before;
import org.junit.Test;
import ubic.gemma.core.datastructure.matrix.DoubleSingleCellExpressionDataMatrix;
import ubic.gemma.core.util.BuildInfo;
import ubic.gemma.model.expression.bioAssayData.SingleCellExpressionDataVector;
import ubic.gemma.persistence.util.EntityUrlBuilder;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.util.Collection;

import static org.assertj.core.api.Assertions.assertThat;
import static ubic.gemma.persistence.service.expression.experiment.SingleCellTestUtils.randomSingleCellVectors;
import static ubic.gemma.persistence.service.expression.experiment.SingleCellTestUtils.setSeed;

public class TabularMatrixWriterTest {

    private TabularMatrixWriter writer;

    @Before
    public void setUp() {
        EntityUrlBuilder entityUrlBuilder = new EntityUrlBuilder( "https://gemma.msl.ubc.ca" );
        writer = new TabularMatrixWriter( entityUrlBuilder, BuildInfo.fromClasspath() );
    }

    @Test
    public void testWriteMatrix() throws IOException {
        setSeed( 123 );
        Collection<SingleCellExpressionDataVector> vectors = randomSingleCellVectors();
        DoubleSingleCellExpressionDataMatrix matrix = new DoubleSingleCellExpressionDataMatrix( vectors );
        byte[] blob;
        try ( ByteArrayOutputStream baos = new ByteArrayOutputStream() ) {
            writer.write( matrix, baos );
            blob = baos.toByteArray();
        }
        assertThat( blob ).asString( StandardCharsets.UTF_8 )
                .contains( "probe_id\tprobe_name\tbm0___ba0_cell_ids\tbm0___ba0_values\tbm1___ba1_cell_ids\tbm1___ba1_values\tbm2___ba2_cell_ids\tbm2___ba2_values\tbm3___ba3_cell_ids\tbm3___ba3_values\n" )
                .contains( "\tcs0\t3|11|27|40|46|58|65|78|86|94|110|117|123|136|148|160|161|176|185|197|203|218|227|231|249|254|269|273|282|295|302|313|321|334|343|356|364|375|386|397|409|413|424|431|445|457|464|471|489|491|507|515|521|535|544|552|563|579|582|598|610|614|630|631|648|659|669|678|681|691|709|720|725|736|747|754|766|777|788|791|806|816|826|840|850|854|863|877|882|895|906|915|922|937|944|956|968|980|982|1000\t12.0|5.0|3.0|7.0|8.0|6.0|4.0|5.0|6.0|3.0|8.0|3.0|3.0|4.0|1.0|4.0|4.0|8.0|6.0|4.0|4.0|2.0|12.0|8.0|11.0|3.0|9.0|8.0|6.0|1.0|7.0|7.0|10.0|7.0|5.0|3.0|9.0|10.0|4.0|5.0|7.0|5.0|3.0|2.0|2.0|4.0|7.0|3.0|10.0|6.0|8.0|3.0|3.0|7.0|11.0|4.0|7.0|5.0|1.0|5.0|11.0|2.0|10.0|9.0|8.0|9.0|2.0|10.0|6.0|10.0|3.0|5.0|1.0|2.0|6.0|10.0|3.0|3.0|8.0|6.0|9.0|1.0|2.0|6.0|8.0|9.0|5.0|1.0|1.0|1.0|1.0|6.0|9.0|7.0|3.0|10.0|6.0|3.0|5.0|4.0\t1001|1011|1029|1031|1048|1058|1061|1077|1083|1095|1101|1111|1127|1135|1147|1159|1166|1174|1185|1193|1210|1212|1223|1238|1246|1252|1268|1277|1286|1299|1309|1317|1327|1334|1342|1352|1366|1377|1390|1393|1404|1420|1429|1432|1450|1452|1467|1473|1490|1494|1508|1515|1523|1540|1548|1558|1561|1572|1590|1600|1607|1614|1622|1640|1642|1652|1667|1678|1683|1698|1705|1712|1724|1732|1742|1760|1765|1778|1783|1792|1805|1813|1830|1834|1850|1855|1868|1878|1885|1900|1902|1915|1930|1940|1950|1958|1970|1980|1985|1999\t8.0|2.0|8.0|5.0|7.0|5.0|1.0|8.0|3.0|4.0|5.0|3.0|5.0|8.0|7.0|4.0|7.0|4.0|9.0|6.0|6.0|8.0|9.0|10.0|2.0|9.0|2.0|2.0|6.0|3.0|4.0|1.0|9.0|5.0|7.0|4.0|3.0|8.0|8.0|5.0|5.0|5.0|8.0|10.0|7.0|7.0|4.0|10.0|7.0|4.0|4.0|10.0|10.0|9.0|9.0|2.0|16.0|3.0|4.0|5.0|4.0|7.0|3.0|2.0|13.0|4.0|4.0|10.0|11.0|4.0|7.0|7.0|13.0|4.0|13.0|6.0|5.0|5.0|1.0|5.0|2.0|1.0|5.0|5.0|7.0|0.0|9.0|4.0|11.0|9.0|7.0|8.0|7.0|2.0|2.0|7.0|9.0|5.0|2.0|9.0\t2010|2012|2028|2037|2048|2058|2065|2077|2087|2098|2101|2116|2128|2138|2141|2158|2165|2173|2190|2196|2208|2218|2224|2240|2241|2252|2262|2273|2286|2292|2307|2319|2329|2337|2342|2351|2368|2373|2382|2392|2406|2420|2424|2435|2441|2452|2469|2476|2484|2498|2501|2511|2528|2540|2544|2554|2568|2572|2588|2595|2602|2616|2626|2632|2646|2660|2665|2676|2681|2700|2708|2717|2726|2739|2747|2751|2766|2771|2783|2792|2808|2814|2821|2833|2847|2853|2867|2871|2885|2897|2907|2913|2923|2933|2942|2959|2962|2971|2984|2994\t14.0|2.0|5.0|4.0|2.0|7.0|4.0|2.0|5.0|8.0|6.0|8.0|9.0|2.0|12.0|5.0|5.0|4.0|3.0|12.0|9.0|7.0|1.0|8.0|8.0|10.0|3.0|6.0|6.0|3.0|2.0|9.0|6.0|1.0|4.0|11.0|5.0|5.0|9.0|4.0|2.0|2.0|11.0|3.0|2.0|2.0|3.0|8.0|3.0|5.0|16.0|13.0|8.0|4.0|10.0|8.0|2.0|3.0|3.0|9.0|2.0|1.0|8.0|2.0|5.0|9.0|4.0|4.0|4.0|1.0|6.0|4.0|1.0|6.0|13.0|7.0|5.0|5.0|2.0|3.0|2.0|4.0|5.0|1.0|4.0|10.0|10.0|6.0|5.0|7.0|8.0|8.0|16.0|9.0|4.0|3.0|2.0|6.0|5.0|5.0\t3004|3018|3023|3032|3048|3058|3061|3072|3083|3093|3107|3116|3121|3131|3149|3154|3161|3178|3187|3191|3203|3212|3221|3232|3242|3252|3264|3275|3289|3296|3308|3318|3327|3332|3349|3360|3366|3373|3383|3393|3409|3415|3428|3433|3447|3452|3466|3479|3490|3498|3510|3514|3524|3535|3546|3560|3569|3574|3582|3592|3605|3617|3623|3631|3643|3656|3668|3680|3682|3699|3705|3716|3730|3737|3747|3756|3762|3773|3789|3797|3808|3811|3823|3834|3846|3857|3869|3878|3886|3892|3902|3915|3925|3936|3942|3959|3967|3978|3983|3994\t1.0|8.0|3.0|3.0|11.0|7.0|2.0|13.0|8.0|5.0|11.0|4.0|3.0|4.0|7.0|3.0|7.0|3.0|6.0|4.0|7.0|3.0|15.0|8.0|7.0|13.0|6.0|5.0|10.0|4.0|6.0|5.0|1.0|6.0|6.0|15.0|18.0|2.0|6.0|3.0|8.0|5.0|0.0|11.0|6.0|0.0|10.0|13.0|6.0|4.0|7.0|1.0|9.0|11.0|9.0|11.0|8.0|5.0|7.0|8.0|6.0|2.0|6.0|4.0|4.0|1.0|9.0|5.0|8.0|12.0|6.0|11.0|1.0|8.0|4.0|14.0|14.0|2.0|4.0|11.0|4.0|9.0|2.0|2.0|3.0|2.0|7.0|4.0|3.0|11.0|4.0|11.0|3.0|2.0|3.0|2.0|1.0|5.0|3.0|4.0\n" )
                .hasLineCount( 111 );
    }

    @Test
    public void testWriteVectors() throws IOException {
        setSeed( 123 );
        Collection<SingleCellExpressionDataVector> vectors = randomSingleCellVectors();
        byte[] blob;
        try ( ByteArrayOutputStream baos = new ByteArrayOutputStream() ) {
            writer.write( vectors, null, new OutputStreamWriter( baos ) );
            blob = baos.toByteArray();
        }
        assertThat( blob ).asString( StandardCharsets.UTF_8 )
                .contains( "probe_id\tprobe_name\tbm0___ba0_cell_ids\tbm0___ba0_values\tbm1___ba1_cell_ids\tbm1___ba1_values\tbm2___ba2_cell_ids\tbm2___ba2_values\tbm3___ba3_cell_ids\tbm3___ba3_values\n" )
                .contains( "\tcs0\t3|11|27|40|46|58|65|78|86|94|110|117|123|136|148|160|161|176|185|197|203|218|227|231|249|254|269|273|282|295|302|313|321|334|343|356|364|375|386|397|409|413|424|431|445|457|464|471|489|491|507|515|521|535|544|552|563|579|582|598|610|614|630|631|648|659|669|678|681|691|709|720|725|736|747|754|766|777|788|791|806|816|826|840|850|854|863|877|882|895|906|915|922|937|944|956|968|980|982|1000\t12.0|5.0|3.0|7.0|8.0|6.0|4.0|5.0|6.0|3.0|8.0|3.0|3.0|4.0|1.0|4.0|4.0|8.0|6.0|4.0|4.0|2.0|12.0|8.0|11.0|3.0|9.0|8.0|6.0|1.0|7.0|7.0|10.0|7.0|5.0|3.0|9.0|10.0|4.0|5.0|7.0|5.0|3.0|2.0|2.0|4.0|7.0|3.0|10.0|6.0|8.0|3.0|3.0|7.0|11.0|4.0|7.0|5.0|1.0|5.0|11.0|2.0|10.0|9.0|8.0|9.0|2.0|10.0|6.0|10.0|3.0|5.0|1.0|2.0|6.0|10.0|3.0|3.0|8.0|6.0|9.0|1.0|2.0|6.0|8.0|9.0|5.0|1.0|1.0|1.0|1.0|6.0|9.0|7.0|3.0|10.0|6.0|3.0|5.0|4.0\t1001|1011|1029|1031|1048|1058|1061|1077|1083|1095|1101|1111|1127|1135|1147|1159|1166|1174|1185|1193|1210|1212|1223|1238|1246|1252|1268|1277|1286|1299|1309|1317|1327|1334|1342|1352|1366|1377|1390|1393|1404|1420|1429|1432|1450|1452|1467|1473|1490|1494|1508|1515|1523|1540|1548|1558|1561|1572|1590|1600|1607|1614|1622|1640|1642|1652|1667|1678|1683|1698|1705|1712|1724|1732|1742|1760|1765|1778|1783|1792|1805|1813|1830|1834|1850|1855|1868|1878|1885|1900|1902|1915|1930|1940|1950|1958|1970|1980|1985|1999\t8.0|2.0|8.0|5.0|7.0|5.0|1.0|8.0|3.0|4.0|5.0|3.0|5.0|8.0|7.0|4.0|7.0|4.0|9.0|6.0|6.0|8.0|9.0|10.0|2.0|9.0|2.0|2.0|6.0|3.0|4.0|1.0|9.0|5.0|7.0|4.0|3.0|8.0|8.0|5.0|5.0|5.0|8.0|10.0|7.0|7.0|4.0|10.0|7.0|4.0|4.0|10.0|10.0|9.0|9.0|2.0|16.0|3.0|4.0|5.0|4.0|7.0|3.0|2.0|13.0|4.0|4.0|10.0|11.0|4.0|7.0|7.0|13.0|4.0|13.0|6.0|5.0|5.0|1.0|5.0|2.0|1.0|5.0|5.0|7.0|0.0|9.0|4.0|11.0|9.0|7.0|8.0|7.0|2.0|2.0|7.0|9.0|5.0|2.0|9.0\t2010|2012|2028|2037|2048|2058|2065|2077|2087|2098|2101|2116|2128|2138|2141|2158|2165|2173|2190|2196|2208|2218|2224|2240|2241|2252|2262|2273|2286|2292|2307|2319|2329|2337|2342|2351|2368|2373|2382|2392|2406|2420|2424|2435|2441|2452|2469|2476|2484|2498|2501|2511|2528|2540|2544|2554|2568|2572|2588|2595|2602|2616|2626|2632|2646|2660|2665|2676|2681|2700|2708|2717|2726|2739|2747|2751|2766|2771|2783|2792|2808|2814|2821|2833|2847|2853|2867|2871|2885|2897|2907|2913|2923|2933|2942|2959|2962|2971|2984|2994\t14.0|2.0|5.0|4.0|2.0|7.0|4.0|2.0|5.0|8.0|6.0|8.0|9.0|2.0|12.0|5.0|5.0|4.0|3.0|12.0|9.0|7.0|1.0|8.0|8.0|10.0|3.0|6.0|6.0|3.0|2.0|9.0|6.0|1.0|4.0|11.0|5.0|5.0|9.0|4.0|2.0|2.0|11.0|3.0|2.0|2.0|3.0|8.0|3.0|5.0|16.0|13.0|8.0|4.0|10.0|8.0|2.0|3.0|3.0|9.0|2.0|1.0|8.0|2.0|5.0|9.0|4.0|4.0|4.0|1.0|6.0|4.0|1.0|6.0|13.0|7.0|5.0|5.0|2.0|3.0|2.0|4.0|5.0|1.0|4.0|10.0|10.0|6.0|5.0|7.0|8.0|8.0|16.0|9.0|4.0|3.0|2.0|6.0|5.0|5.0\t3004|3018|3023|3032|3048|3058|3061|3072|3083|3093|3107|3116|3121|3131|3149|3154|3161|3178|3187|3191|3203|3212|3221|3232|3242|3252|3264|3275|3289|3296|3308|3318|3327|3332|3349|3360|3366|3373|3383|3393|3409|3415|3428|3433|3447|3452|3466|3479|3490|3498|3510|3514|3524|3535|3546|3560|3569|3574|3582|3592|3605|3617|3623|3631|3643|3656|3668|3680|3682|3699|3705|3716|3730|3737|3747|3756|3762|3773|3789|3797|3808|3811|3823|3834|3846|3857|3869|3878|3886|3892|3902|3915|3925|3936|3942|3959|3967|3978|3983|3994\t1.0|8.0|3.0|3.0|11.0|7.0|2.0|13.0|8.0|5.0|11.0|4.0|3.0|4.0|7.0|3.0|7.0|3.0|6.0|4.0|7.0|3.0|15.0|8.0|7.0|13.0|6.0|5.0|10.0|4.0|6.0|5.0|1.0|6.0|6.0|15.0|18.0|2.0|6.0|3.0|8.0|5.0|0.0|11.0|6.0|0.0|10.0|13.0|6.0|4.0|7.0|1.0|9.0|11.0|9.0|11.0|8.0|5.0|7.0|8.0|6.0|2.0|6.0|4.0|4.0|1.0|9.0|5.0|8.0|12.0|6.0|11.0|1.0|8.0|4.0|14.0|14.0|2.0|4.0|11.0|4.0|9.0|2.0|2.0|3.0|2.0|7.0|4.0|3.0|11.0|4.0|11.0|3.0|2.0|3.0|2.0|1.0|5.0|3.0|4.0\n" )
                .hasLineCount( 111 );
    }
}