<?xml version="1.0" encoding="UTF-8"?>
<!-- @author Gemma  -->
<beans xmlns:s="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/security
            http://www.springframework.org/schema/security/spring-security.xsd
            http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- import gsec definitions -->
    <import resource="classpath:gemma/gsec/applicationContext-*.xml"/>

    <!-- works with the HttpSessionEventPublisher configured in web.xml -->
    <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"/>

    <bean id="authenticationLoggerListener" class="org.springframework.security.authentication.event.LoggerListener"/>

    <s:authentication-manager alias="authenticationManager">
        <s:authentication-provider user-service-ref="userManager">
            <s:password-encoder ref="passwordEncoder">
                <s:salt-source user-property="username"/>
            </s:password-encoder>
        </s:authentication-provider>
        <s:authentication-provider ref="runAsAuthenticationProvider"/>
    </s:authentication-manager>

    <bean id="runAsManager" class="org.springframework.security.access.intercept.RunAsManagerImpl">
        <property name="rolePrefix" value="GROUP_"/>
        <property name="key" value="${gemma.runas.password}"/>
    </bean>

    <bean id="runAsAuthenticationProvider"
          class="org.springframework.security.access.intercept.RunAsImplAuthenticationProvider">
        <property name="key" value="${gemma.runas.password}"/>
    </bean>

    <!-- declared separately so we can use it directly. -->
    <bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"/>


    <!--- global method security configuration -->

    <s:global-method-security run-as-manager-ref="runAsManager" secured-annotations="enabled"
                              pre-post-annotations="enabled" access-decision-manager-ref="accessDecisionManager"
                              order="1">
        <s:expression-handler ref="securityExpressionHandler"/>

        <!-- these filters are declared here or in gsec's applicationContext-acl.xml -->
        <s:after-invocation-provider ref="afterAclReadQuiet"/>
        <s:after-invocation-provider ref="afterAclRead"/>
        <s:after-invocation-provider ref="afterAclCollectionRead"/>
        <s:after-invocation-provider ref="afterAclArrayDesignCollectionRead"/>
        <s:after-invocation-provider ref="afterAclDataVectorCollectionRead"/>
        <s:after-invocation-provider ref="afterAclMyDataRead"/>
        <s:after-invocation-provider ref="afterAclMyPrivateDataRead"/>
        <s:after-invocation-provider ref="afterAclAllMyData"/>
        <s:after-invocation-provider ref="afterAclValueObjectCollection"/>
        <s:after-invocation-provider ref="afterAclValueObject"/>
        <s:after-invocation-provider ref="afterAclMapRead"/>
        <s:after-invocation-provider ref="afterAclMapValuesRead"/>
        <s:after-invocation-provider ref="postInvocationAdviceProvider"/><!-- for @Post... -->
    </s:global-method-security>

    <!-- Enable AspectJ autoproxy -->
    <aop:aspectj-autoproxy/>

    <!-- Aspect that adds ACLs for new entities, and deletes them for deleted entities. -->
    <aop:config>
        <aop:aspect id="aclAspect" ref="aclAdvice" order="4">
            <aop:after-returning method="doAclAdvice"
                                 pointcut="ubic.gemma.core.util.Pointcuts.modifier()"
                                 returning="retValue"/>
        </aop:aspect>
    </aop:config>

    <!-- filters (gemma-specific) -->

    <!-- After reading collection of composite sequences -->
    <bean id="afterAclArrayDesignCollectionRead"
          class="ubic.gemma.core.security.authorization.acl.AclAfterCollectionCompSeqByArrayDesignFilter">
        <constructor-arg ref="aclService"/>
        <constructor-arg>
            <list>
                <util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
                <util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
            </list>
        </constructor-arg>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
    </bean>

    <!-- After reading collection of vectors -->
    <bean id="afterAclDataVectorCollectionRead"
          class="ubic.gemma.core.security.authorization.acl.AclAfterCollectionDataVectorByExpressionExperimentFilter">
        <constructor-arg ref="aclService"/>
        <constructor-arg>
            <list>
                <util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
                <util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
            </list>
        </constructor-arg>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
    </bean>

    <bean id="userManager" class="ubic.gemma.core.security.authentication.UserManagerImpl"/>

</beans>