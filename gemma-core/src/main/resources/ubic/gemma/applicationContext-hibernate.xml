<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns="http://www.springframework.org/schema/beans"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<!-- Automatically retry certain failed operations in transactions. FIXME use @Transactional to identify -->
	<aop:config>
		<aop:pointcut id="retryable"
					  expression="ubic.gemma.core.util.SystemArchitectureAspect.serviceMethodWithArg()"/>
		<aop:advisor pointcut-ref="retryable" advice-ref="retryAdvice" order="2"/>
	</aop:config>

	<bean id="retryAdvice" class="org.springframework.retry.interceptor.RetryOperationsInterceptor">
		<property name="retryOperations">
			<bean class="org.springframework.retry.support.RetryTemplate">
				<property name="backOffPolicy">
					<bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy"/>
				</property>
				<property name="retryPolicy">
					<bean class="ubic.gemma.persistence.retry.RetryPolicy">
						<constructor-arg name="maxAttempts" value="${gemma.transaction.maxretries}"/>
						<constructor-arg name="retryableExceptions">
							<map>
								<!-- FIXME we probably don't need all of these. -->
								<entry key="org.hibernate.exception.LockAcquisitionException" value="true"/>
								<entry key="org.springframework.dao.PessimisticLockingFailureException" value="true"/>
								<entry key="org.springframework.dao.OptimisticLockingFailureException" value="true"/>
							</map>
						</constructor-arg>
					</bean>
				</property>
				<property name="listeners">
					<list>
						<ref bean="retryLogger"/>
					</list>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager"
		  lazy-init="true">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<tx:annotation-driven order="3"/>

	<!-- Required for org.springframework.orm.hibernate3.support.ClobStringType -->
	<bean id="defaultLobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true"/>

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" lazy-init="true">
		<property name="dataSource" ref="dataSource"/>
		<property name="lobHandler" ref="defaultLobHandler"/>
		<property name="mappingLocations">
			<list>
				<value>classpath*:gemma/gsec/model/**/*.hbm.xml</value>
				<value>classpath*:ubic/gemma/model/**/*.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLInnoDBDialect</prop>
				<prop key="hibernate.cache.query_cache_factory">org.hibernate.cache.StandardQueryCacheFactory</prop>
				<!-- <prop key="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.EhCacheRegionFactory</prop> -->
				<prop key="hibernate.hbm2ddl.auto">validate</prop>
				<prop key="hibernate.max_fetch_depth">${gemma.hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.jdbc.fetch_size">${gemma.hibernate.jdbc_fetch_size}</prop>
				<prop key="hibernate.default_batch_fetch_size">${gemma.hibernate.default_fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${gemma.hibernate.jdbc_batch_size}</prop>
				<prop key="hibernate.jdbc.batch_versioned_data">true</prop>
				<prop key="hibernate.cache.use_query_cache">${gemma.hibernate.use_query_cache}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${gemma.hibernate.use_second_level_cache}</prop>
				<prop key="hibernate.generate_statistics">${gemma.hibernate.generate_statistics}</prop>
				<prop key="hibernate.cache.use_structured_entries">${gemma.hibernate.cache_use_structured_entries}</prop>
				<prop key="hibernate.order_updates">${gemma.hibernate.order_updates}</prop>
				<prop key="hibernate.order_inserts">${gemma.hibernate.order_inserts}</prop>
				<prop key="hibernate.format_sql">${gemma.hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">${gemma.hibernate.use_sql_comments}</prop>
				<prop key="hibernate.show_sql">${gemma.hibernate.show_sql}</prop>
			</props>
		</property>

		<!-- We have a annotation-configuubic.gemma.persistence.util.ExternalCacheRegionFactorytory -->
		<!-- <property name="cacheProvider"> <ref bean="externalCacheProvider" /> </property> -->
		<property name="cacheRegionFactory" ref="externalCacheRegionFactory"/>
		<!-- <property name="cacheRegionFactory" ref="cacheRegionFactory" /> -->
	</bean>

	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
		  p:cache-manager-ref="ehcache"/>

	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>

</beans>
