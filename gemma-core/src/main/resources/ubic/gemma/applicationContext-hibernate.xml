<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns="http://www.springframework.org/schema/beans" xmlns:cache="http://www.springframework.org/schema/cache"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!-- Enable AspectJ autoproxy -->
	<aop:aspectj-autoproxy/>

	<!-- Automatically retry certain failed operations (marked with @Transactional or explicitly with @Retry) -->
	<aop:config>
		<aop:pointcut id="retryable"
					  expression="ubic.gemma.core.util.Pointcuts.retryableOrTransactionalServiceMethod()"/>
		<aop:advisor pointcut-ref="retryable" advice-ref="retryAdvice" order="2"/>
	</aop:config>

	<bean id="retryAdvice" class="org.springframework.retry.interceptor.RetryOperationsInterceptor">
		<property name="retryOperations">
			<bean class="org.springframework.retry.support.RetryTemplate">
				<property name="backOffPolicy">
					<bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy"/>
				</property>
				<property name="retryPolicy" ref="retryPolicy">
				</property>
				<property name="listeners">
					<list>
						<ref bean="retryLogger"/>
					</list>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="retryPolicy" class="org.springframework.retry.policy.SimpleRetryPolicy">
		<constructor-arg name="maxAttempts" value="${gemma.transaction.maxretries}"/>
		<constructor-arg name="retryableExceptions">
			<map>
				<entry key="org.springframework.dao.PessimisticLockingFailureException" value="true"/>
				<entry key="org.springframework.dao.OptimisticLockingFailureException" value="true"/>
			</map>
		</constructor-arg>
		<constructor-arg name="traverseCauses" value="true"/>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<tx:annotation-driven order="3"/>

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		  depends-on="ehcache">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:hibernate.cfg.xml"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${gemma.hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.dialect">ubic.gemma.persistence.hibernate.MySQL57InnoDBDialect</prop>
				<!-- caching options -->
				<prop
					key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory
				</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<!-- defaults for fetching/inserting -->
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="hibernate.default_batch_fetch_size">${gemma.hibernate.default_batch_fetch_size}</prop>
				<prop key="hibernate.jdbc.fetch_size">${gemma.hibernate.jdbc_fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${gemma.hibernate.jdbc_batch_size}</prop>
				<prop key="hibernate.jdbc.batch_versioned_data">true</prop>
				<prop key="hibernate.order_inserts">true</prop>
				<prop key="hibernate.order_updates">true</prop>
				<!-- used for micrometer -->
				<!-- FIXME: this is unnecessary in the test profile -->
				<prop key="hibernate.generate_statistics">true</prop>
				<!-- debugging options -->
				<prop key="hibernate.show_sql">${gemma.hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${gemma.hibernate.format_sql}</prop>
				<prop key="hibernate.search.lucene_version">LUCENE_36</prop>
				<prop key="hibernate.search.default.indexBase">${gemma.search.dir}</prop>
				<!-- prevents Hibernate from obtaining a JDBC connection when initializing; this is not stable -->
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">${gemma.hibernate.use_jdbc_metadata_defaults}</prop>
			</props>
		</property>
	</bean>

	<!-- enable usage of @Cacheable annotations -->
	<cache:annotation-driven order="2"/>

	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<constructor-arg ref="ehcache"/>
	</bean>

	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

</beans>
