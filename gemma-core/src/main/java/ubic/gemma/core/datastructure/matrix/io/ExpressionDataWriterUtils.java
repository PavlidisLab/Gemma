/*
 * The Gemma project
 *
 * Copyright (c) 2008 University of British Columbia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package ubic.gemma.core.datastructure.matrix.io;

import ubic.basecode.util.StringUtil;
import ubic.gemma.core.datastructure.matrix.BulkExpressionDataMatrix;
import ubic.gemma.core.datastructure.matrix.MultiAssayBulkExpressionDataMatrix;
import ubic.gemma.core.util.BuildInfo;
import ubic.gemma.core.util.Constants;
import ubic.gemma.model.common.quantitationtype.QuantitationType;
import ubic.gemma.model.expression.bioAssay.BioAssay;
import ubic.gemma.model.expression.bioAssayData.DataVector;
import ubic.gemma.model.expression.bioAssayData.ProcessedExpressionDataVector;
import ubic.gemma.model.expression.bioAssayData.RawExpressionDataVector;
import ubic.gemma.model.expression.bioAssayData.SingleCellExpressionDataVector;
import ubic.gemma.model.expression.biomaterial.BioMaterial;
import ubic.gemma.model.expression.experiment.ExperimentalFactor;
import ubic.gemma.model.expression.experiment.ExpressionExperiment;

import javax.annotation.Nullable;
import java.io.IOException;
import java.io.Writer;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import static ubic.gemma.core.util.TsvUtils.format;

/**
 * @author keshav
 */
@SuppressWarnings({ "unused", "WeakerAccess" }) // Possible external use
public class ExpressionDataWriterUtils {

    private static final String DELIMITER_BETWEEN_BIOMATERIAL_AND_BIOASSAYS = "___";

    /**
     * Append a base header to a file.
     */
    public static void appendBaseHeader( String fileTypeStr, BuildInfo buildInfo, Writer buf ) throws IOException {
        buf.append( "# " ).append( fileTypeStr ).append( " file generated by Gemma " ).append( buildInfo.getVersion() ).append( " on " ).append( format( new Date() ) ).append( "\n" );
        buf.append( "#\n" );
        for ( String line : Constants.GEMMA_CITATION_NOTICE ) {
            buf.append( "# " ).append( line ).append( "\n" );
        }
        buf.append( "#\n" );
        buf.append( "# " ).append( Constants.GEMMA_LICENSE_NOTICE ).append( "\n" );
    }

    /**
     * Appends base header information (about the experiment) to a file.
     *
     * @param buf         buffer
     * @param fileTypeStr file type str
     * @param experiment  ee
     * @param experimentUrl an URL for the expriment, or null to commit
     */
    public static void appendBaseHeader( ExpressionExperiment experiment, String fileTypeStr, @Nullable String experimentUrl, BuildInfo buildInfo, Writer buf ) throws IOException {
        appendBaseHeader( fileTypeStr, buildInfo, buf );
        buf.append( "#\n" );
        buf.append( "# Short name: " ).append( format( experiment.getShortName() ) ).append( "\n" );
        buf.append( "# Name: " ).append( format( experiment.getName() ) ).append( "\n" );
        if ( experimentUrl != null ) {
            buf.append( "# Experiment details: " ).append( experimentUrl ).append( "\n" );
        }
    }

    /**
     * Append base header information (about the experiment) to a file with some information about the quantitation type.
     */
    public static void appendBaseHeader( ExpressionExperiment experiment, QuantitationType quantitationType, Class<? extends DataVector> dataVectorType, String fileTypeStr, @Nullable String experimentUrl, BuildInfo buildInfo, Writer buf ) throws IOException {
        appendBaseHeader( experiment, fileTypeStr, null, buildInfo, buf );
        buf.append( "# Quantitation type: " ).append( formatQuantitationType( quantitationType, dataVectorType ) ).append( "\n" );
    }

    public static String formatQuantitationType( QuantitationType quantitationType, Class<? extends DataVector> dataVectorType ) {
        StringBuilder sb = new StringBuilder();
        sb.append( quantitationType.getName() );
        if ( ProcessedExpressionDataVector.class.isAssignableFrom( dataVectorType ) ) {
            sb.append( " [Data Type=Processed]" );
            sb.append( " [Preferred]" );
        } else if ( RawExpressionDataVector.class.isAssignableFrom( dataVectorType ) ) {
            sb.append( " [Data Type=Raw]" );
            if ( quantitationType.getIsPreferred() ) {
                sb.append( " [Preferred]" );
            }
        } else if ( SingleCellExpressionDataVector.class.isAssignableFrom( dataVectorType ) ) {
            sb.append( " [Data Type=Single-cell]" );
            if ( quantitationType.getIsSingleCellPreferred() ) {
                sb.append( " [Preferred]" );
            }
        } else {
            throw new UnsupportedOperationException( "Unsupported data vector type: " + dataVectorType.getName() );
        }
        sb.append( " [General Type=" ).append( quantitationType.getGeneralType() ).append( "]" );
        sb.append( " [Type=" ).append( quantitationType.getType() ).append( "]" );
        sb.append( " [Scale=" ).append( quantitationType.getScale() ).append( "]" );
        sb.append( " [Representation=" ).append( quantitationType.getRepresentation() ).append( "]" );
        if ( quantitationType.getIsRatio() ) {
            sb.append( " [Ratio]" );
        }
        if ( quantitationType.getIsBackground() ) {
            sb.append( " [Background]" );
        }
        if ( quantitationType.getIsBackgroundSubtracted() ) {
            sb.append( " [Background-subtracted]" );
        }
        if ( ProcessedExpressionDataVector.class.isAssignableFrom( dataVectorType ) && quantitationType.getIsNormalized() ) {
            sb.append( " [Quantile-normalized]" );
        } else if ( quantitationType.getIsNormalized() ) {
            sb.append( " [Normalized]" );
        }
        if ( quantitationType.getIsBatchCorrected() ) {
            sb.append( " [Batch-corrected]" );
        }
        return sb.toString();
    }

    /**
     * Constructs a sample name for a given column of a data matrix.
     *
     * @param matrix           matrix
     * @param assayColumnIndex The column index in the matrix.
     * @return BA name
     */
    public static String constructSampleName( BulkExpressionDataMatrix<?> matrix, int assayColumnIndex ) {
        BioMaterial bioMaterialForColumn = matrix.getBioMaterialForColumn( assayColumnIndex );
        Collection<BioAssay> bioAssaysForColumn;
        if ( matrix instanceof MultiAssayBulkExpressionDataMatrix ) {
            bioAssaysForColumn = ( ( MultiAssayBulkExpressionDataMatrix<?> ) matrix ).getBioAssaysForColumn( assayColumnIndex );
        } else {
            bioAssaysForColumn = Collections.singleton( matrix.getBioAssayForColumn( assayColumnIndex ) );
        }
        return constructSampleName( bioMaterialForColumn, bioAssaysForColumn );
    }

    /**
     * Construct a sample name in case there is only one BioAssay attached to the corresponding BioMaterial.
     */
    public static String constructSampleName( BioMaterial bm, BioAssay ba ) {
        return constructSampleName( bm, Collections.singleton( ba ) );
    }

    /**
     * Construct a BioAssay column name prefixed by the {@link BioMaterial} from which it originates.
     */
    public static String constructSampleName( BioMaterial bioMaterial, Collection<BioAssay> bioAssays ) {
        // sort for consistency
        return StringUtil.makeNames( bioMaterial.getName()
                + DELIMITER_BETWEEN_BIOMATERIAL_AND_BIOASSAYS
                // sort for consistency
                + bioAssays.stream().map( ExpressionDataWriterUtils::getBioAssayName ).sorted().collect( Collectors.joining( "." ) ) );
    }

    /**
     * Construct a BioAssay column name, unprefixed by the {@link BioMaterial} from which it originates.
     */
    public static String constructAssayName( BioAssay ba ) {
        return StringUtil.makeNames( getBioAssayName( ba ) );
    }

    /**
     * Construct a BioAssay column name, unprefixed by the {@link BioMaterial} from which it originates.
     */
    public static String constructCellIdName( BioAssay ba, String cellId ) {
        return StringUtil.makeNames( getBioAssayName( ba ) + "_" + cellId );
    }

    private static String getBioAssayName( BioAssay ba ) {
        return ba.getShortName() != null ? ba.getShortName() : ba.getName();
    }

    /**
     * Construct an ExperimentalFactor column name.
     * @see StringUtil#makeNames(String)
     */
    public static String constructExperimentalFactorName( ExperimentalFactor ef ) {
        return StringUtil.makeNames( ef.getName() );
    }

    /**
     * Construct an ExperimentalFactor column names for a list of factors.
     * @see StringUtil#makeNames(String[], boolean)
     */
    public static String[] constructExperimentalFactorNames( List<ExperimentalFactor> factors ) {
        String[] colNames = factors.stream()
                .map( ExperimentalFactor::getName )
                .toArray( String[]::new );
        return StringUtil.makeNames( colNames, true );
    }
}
