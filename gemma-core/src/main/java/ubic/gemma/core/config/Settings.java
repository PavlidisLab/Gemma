/*
 * The Gemma project
 *
 * Copyright (c) 2006-2008 University of British Columbia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package ubic.gemma.core.config;

import lombok.extern.apachecommons.CommonsLog;
import org.apache.commons.configuration2.Configuration;
import org.apache.commons.configuration2.ConfigurationUtils;
import org.apache.commons.configuration2.convert.DefaultListDelimiterHandler;
import org.apache.commons.lang3.StringUtils;
import org.springframework.util.PropertyPlaceholderHelper;

import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 * Convenience class to access Gemma properties defined in a resource. Methods will look in Gemma.properties,
 * project.properties, build.properties and in the system properties.
 *
 * @author pavlidis
 * @see PropertySourcesConfiguration
 * @deprecated This has been replaced with Spring-based configuration {@link SettingsConfig} and usage of {@link org.springframework.beans.factory.annotation.Value}
 *             to inject configurations. You can use {@code @Value("${property}")} as replacement.
 */
@Deprecated
@CommonsLog
public class Settings {

    /**
     * For web application, the key for the tracker ID in your configuration file. Tracker id for Google is something
     * like 'UA-12441-1'. In your Gemma.properties file add a line like:
     * <pre>
     * ga.tracker = UA_123456_1
     * </pre>
     */
    private static final String ANALYTICS_TRACKER_PROPERTY = "ga.tracker";

    private static final Configuration config;

    static {
        try {
            config = new PropertySourcesConfiguration( SettingsConfig.settingsPropertySources(), new DefaultListDelimiterHandler( ',' ) );
        } catch ( IOException e ) {
            throw new RuntimeException( e );
        }
        // step through the result and do a final round of variable substitution.
        PropertyPlaceholderHelper placeholderHelper = new PropertyPlaceholderHelper( "${", "}", ":", false );
        for ( Iterator<String> it = Settings.config.getKeys(); it.hasNext(); ) {
            String key = it.next();
            Object val = Settings.config.getProperty( key );
            if ( val instanceof String ) {
                String newVal = placeholderHelper.replacePlaceholders( ( String ) val, Settings.config::getString );
                if ( !newVal.equals( val ) ) {
                    Settings.config.setProperty( key, newVal );
                }
            }
        }

        if ( Settings.log.isTraceEnabled() ) {
            Settings.log.trace( "********** Configuration details ***********" );
            ConfigurationUtils.dump( Settings.config, System.err );
            Settings.log.trace( "********** End of configuration details ***********" );
        }
    }

    /**
     * @return The local directory where files generated by analyses are stored. It will end in a file separator ("/" on
     * unix).
     */
    public static String getAnalysisStoragePath() {
        String val = Settings.getString( "gemma.analysis.dir" );
        assert val != null;
        if ( val.endsWith( File.separator ) )
            return val;
        return val + File.separator;
    }

    public static String getAnalyticsKey() {
        return Settings.getString( Settings.ANALYTICS_TRACKER_PROPERTY );
    }

    public static boolean getBoolean( String key ) {
        try {
            return Settings.config.getBoolean( key );
        } catch ( NoSuchElementException nsee ) {
            Settings.log.info( key + " is not configured, returning default value of false" );
            return false;
        }
    }

    public static boolean getBoolean( String key, boolean defaultValue ) {
        return Settings.config.getBoolean( key, defaultValue );
    }

    /**
     * @return The local directory where files downloaded/uploaded are stored. It will end in a file separator ("/" on
     * unix).
     */
    public static String getDownloadPath() {
        String val = Settings.getString( "gemma.download.path" );
        if ( val.endsWith( File.separator ) )
            return val;
        return val + File.separatorChar;
    }

    /**
     * @return host url e.g. <a href="http://gemma.msl.ubc.ca">http://gemma.msl.ubc.ca</a>
     */
    public static String getHostUrl() {
        String host = Settings.getString( "gemma.hosturl", "https://gemma.msl.ubc.ca" );
        if ( host.length() > 1 && host.endsWith( "/" ) ) {
            return host.substring( 0, host.length() - 1 );
        }
        return host;
    }

    public static int getInt( String key ) {
        try {
            return Settings.config.getInt( key );
        } catch ( NoSuchElementException nsee ) {
            Settings.log.info( key + " is not configured, returning default value of 1" );
            return 1;
        }
    }

    public static int getInt( String key, int defaultValue ) {
        return Settings.config.getInt( key, defaultValue );
    }

    public static Iterator<String> getKeys() {
        return Settings.config.getKeys();
    }

    public static Object getProperty( String key ) {
        return Settings.config.getProperty( key );
    }

    public static void setProperty( String key, Object val ) {
        Settings.config.setProperty( key, val );
    }

    public static String getString( String key ) {
        try {
            return StringUtils.strip( Settings.config.getString( key ), "\"'" );
        } catch ( NoSuchElementException nsee ) {
            Settings.log.info( key + " is not configured, returning empty string" );
            return "";
        }
    }

    public static String getString( String key, String defaultValue ) {
        return Settings.config.getString( key, defaultValue );
    }

    public static String[] getStringArray( String key ) {
        return Settings.config.getStringArray( key );
    }
}