<?xml version="1.0" encoding="UTF-8"?>
<!-- @author Gemma  -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:s="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
   http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <bean id="authenticationLoggerListener" class="org.springframework.security.authentication.event.LoggerListener"/>

    <s:http auto-config="true" access-decision-manager-ref="httpAccessDecisionManager" pattern="/rest/v2/**"
            entry-point-ref="restAuthEntryPoint" realm="Gemma rest api">

        <s:anonymous granted-authority="IS_AUTHENTICATED_ANONYMOUSLY"/>

        <s:http-basic entry-point-ref="restAuthEntryPoint"/>
        <s:custom-filter position="FIRST" ref="corsFilter"/>
        <!--
        The next line provides bulk access control for all url matching the given pattern,
        but we also use @PreAuthorize annotations on endpoints for a more fine-grained
        authorization
         -->
        <!--<s:intercept-url pattern="/rest/v2/datasets/**" access="GROUP_ADMIN"/>-->
    </s:http>

    <bean id="corsFilter" class="ubic.gemma.web.services.rest.util.CORSFilter"/>
    <bean id="restAuthEntryPoint" class="ubic.gemma.web.services.rest.util.RestAuthEntryPoint"/>

</beans>