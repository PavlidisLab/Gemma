//file:noinspection GrUnresolvedAccess

def gemmaVersion
def baseCodeVersion
def dataDir
def deployDir
def cliDir
def cliDirSymlink

void setBuildStatus(String context, String message, String state) {
    step([
        $class            : "GitHubCommitStatusSetter",
        reposSource       : [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/PavlidisLab/Gemma"],
        contextSource     : [$class: "ManuallyEnteredCommitContextSource", context: context],
        errorHandlers     : [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
        statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]]]
    ])
}

pipeline {
    agent any
    tools {
        maven 'Maven 3.1.1'
    }
    parameters {
        string(name: 'DATA_DIR', defaultValue: '/space/gemmaData', description: 'Directory where production data is stored.')
        string(name: 'STAGING_DATA_DIR', defaultValue: '/space/staginggemmaData', description: 'Directory where staging data is stored.')
        string(name: 'DEV_DATA_DIR', defaultValue: '/space/sandboxgemmaData', description: 'Directory where development data is stored.')
        string(name: 'MAVEN_SITES_DIR', defaultValue: '/space/web/maven-sites', description: 'Directory where Maven sites are deployed.')
        string(name: 'CLI_DIR_PREFIX', defaultValue: '/space/grp/gemma-cli', description: 'Prefix for Gemma CLI deployment directory.')
        string(name: 'DEPLOY_DIR_PREFIX', defaultValue: '/var/local/tomcat/gemma', description: 'Prefix for Gemma Web deployment directories.')
        // either hotfix or release, we only have one staging server & CLI symlink
        choice(name: 'STAGING_BRANCH', choices: ['hotfix', 'release'], description: 'Branch deployed to the staging server and CLI symlink.')
        // whether or not to force integration tests
        booleanParam(name: 'FORCE_INTEGRATION_TESTS', defaultValue: false, description: 'Force integration tests to be performed regardless of the branch being built.')
        booleanParam(name: 'FORCE_SONARQUBE', defaultValue: false, description: 'Force SonarQube analysis to be performed regardless of the branch being built.')
        string(name: 'TESTDB_URL', defaultValue: 'jdbc:mysql://prod-db/gemdtest?useSSL=false', description: 'URL to access the test database')
    }
    stages {
        stage('Checkout scm') {
            steps {
                checkout scm
                script {
                    gemmaVersion = sh script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true
                    baseCodeVersion = sh script: 'mvn help:evaluate -Dartifact=baseCode:baseCode -Dexpression=project.version -q -DforceStdout', returnStdout: true
                    if (env.BRANCH_NAME == "master" && gemmaVersion.endsWith("-SNAPSHOT")) {
                        error("A production build must not have a -SNAPSHOT suffix.")
                    }
                    if (env.BRANCH_NAME != "master" && !gemmaVersion.endsWith("-SNAPSHOT")) {
                        error("A development build must have a -SNAPSHOT suffix.")
                    }
                    if (env.BRANCH_NAME == 'master') {
                        dataDir = params.DATA_DIR
                    } else if (env.BRANCH_NAME == 'development') {
                        dataDir = params.DEV_DATA_DIR
                    } else if (env.BRANCH_NAME =~ '^' + params.STAGING_BRANCH + '-.*') {
                        dataDir = params.STAGING_DATA_DIR
                    }
                    if (env.BRANCH_NAME == 'master') {
                        deployDir = 'moe:' + params.DEPLOY_DIR_PREFIX
                    } else {
                        deployDir = 'chalmers:' + params.DEPLOY_DIR_PREFIX
                        if (env.BRANCH_NAME =~ '^' + params.STAGING_BRANCH + '-.*') {
                            deployDir += '-staging'
                        }
                    }
                    if (env.BRANCH_NAME == 'master') {
                        cliDir = params.CLI_DIR_PREFIX + '-' + gemmaVersion
                        cliDirSymlink = params.CLI_DIR_PREFIX
                    } else if (env.BRANCH_NAME =~ '^(hotfix|release)-.*') {
                        cliDir = params.CLI_DIR_PREFIX + '-' + gemmaVersion
                        if (env.BRANCH_NAME =~ '^' + params.STAGING_BRANCH + '-.*') {
                            cliDirSymlink = params.CLI_DIR_PREFIX + '-staging'
                        }
                    }
                }
                sh 'mvn -B clean'
            }
        }
        stage('Build') {
            steps {
                setBuildStatus "Build", "Build #${env.BUILD_NUMBER} has started...", 'PENDING'
                sh 'mvn -B compile'
            }
            post {
                success {
                    setBuildStatus "Build", "Build #${env.BUILD_NUMBER} succeeded.", 'SUCCESS'
                }
                unsuccessful {
                    setBuildStatus "Build", "Build #${env.BUILD_NUMBER} failed.", 'FAILURE'
                }
            }
        }
        stage('Run quick unit tests') {
            steps {
                setBuildStatus "Tests", "Tests for build #${env.BUILD_NUMBER} have started...", 'PENDING'
                sh 'mvn -B test -DexcludedGroups=SlowTest'
            }
            post {
                always {
                    junit testResults: '**/target/surefire-reports/*.xml'
                }
                success {
                    setBuildStatus "Tests", "Tests for build #${env.BUILD_NUMBER} have passed.", 'SUCCESS'
                }
                unsuccessful {
                    setBuildStatus "Tests", "Tests for build #${env.BUILD_NUMBER} failed.", 'FAILURE'
                }
            }
        }
        stage('Package') {
            steps {
                setBuildStatus "Package", "Package for build #${env.BUILD_NUMBER} have started...", 'PENDING'
                sh 'mvn -B package -DskipTests'
            }
            post {
                success {
                    archiveArtifacts artifacts: '**/target/*.jar, **/target/*.war', fingerprint: true
                    setBuildStatus "Package", "Package for build #${env.BUILD_NUMBER} have passed.", 'SUCCESS'
                }
                unsuccessful {
                    setBuildStatus "Package", "Package for build #${env.BUILD_NUMBER} failed.", 'FAILURE'
                }
            }
        }
        stage('Run integration tests and perform deployment in parallel') {
            when {
                anyOf {
                    branch 'master'
                    branch 'hotfix-*'
                    branch 'release-*'
                    branch 'development'
                    expression { params.FORCE_INTEGRATION_TESTS }
                    expression { params.FORCE_SONARQUBE }
                }
            }
            parallel {
                stage('Run slow unit tests and integration tests') {
                    when {
                        anyOf {
                            // we can safely ignore integration tests on the master branch, those were run in hotfix/release
                            branch 'hotfix-*'
                            branch 'release-*'
                            branch 'development'
                            expression { params.FORCE_INTEGRATION_TESTS }
                        }
                    }
                    steps {
                        setBuildStatus "Integration tests", "Integration tests #${env.BUILD_NUMBER} have started...", 'PENDING'
                        sh 'mvn -B test -Dgroups=SlowTest'
                        lock('database/' + params.TESTDB_URL) {
                            withCredentials([usernamePassword(credentialId: 'gemma-testdb', usernameVariable: 'testdbUser', passwordVariable: 'testdbPassword')]) {
                                // testdbUser and testdbPassword are not regular environment variables, they are
                                // substituted by Jenkins as to not be disclosed in the logs
                                sh "mvn -B verify -DskipUnitTests -DtestJvmOptions='-Dgemma.testdb.url=${params.TESTDB_URL} -Dgemma.testdb.username=\${testdbUser} -Dgemma.testdb.password=\${testdbPassword}''"
                            }
                        }
                    }
                    post {
                        always {
                            junit testResults: '**/target/surefire-reports/*.xml'
                            junit testResults: '**/target/failsafe-reports/*.xml'
                        }
                        success {
                            setBuildStatus "Integration tests", "Integration tests for build #${env.BUILD_NUMBER} have passed.", 'SUCCESS'
                        }
                        unsuccessful {
                            setBuildStatus "Integration tests", "Integration tests for build #${env.BUILD_NUMBER} failed.", 'FAILURE'
                        }
                    }
                }
                stage('SonarQube Analysis') {
                    when {
                        anyOf {
                            branch 'master'
                            branch 'hotfix-*'
                            branch 'release-*'
                            branch 'development'
                            expression { params.FORCE_SONARQUBE }
                        }
                    }
                    steps {
                        setBuildStatus "SonarQube Analysis", "SonarQube analysis for build #${env.BUILD_NUMBER} has started...", 'PENDING'
                        withSonarQubeEnv('UBC SonarQube') {
                            sh "mvn sonar:sonar -Dsonar.projectKey=mslg"
                        }
                    }
                    post {
                        success {
                            setBuildStatus "SonarQube analysis", "SonarQube analysis for build #${env.BUILD_NUMBER} have passed.", 'SUCCESS'
                        }
                        failure {
                            setBuildStatus "SonarQube analysis", "SonarQube analysis for build #${env.BUILD_NUMBER} failed.", 'ERROR'
                        }
                        unstable {
                            setBuildStatus "SonarQube analysis", "SonarQube analysis for build #${env.BUILD_NUMBER} failed.", 'FAILURE'
                        }
                    }
                }
                stage('Deploy artifacts') {
                    when {
                        anyOf {
                            branch 'master'
                            branch 'hotfix-*'
                            branch 'release-*'
                            branch 'development'
                        }
                    }
                    steps {
                        sh 'mvn -B deploy -DskipTests'
                    }
                }
                stage('Deploy Maven website') {
                    when {
                        anyOf {
                            branch 'master'
                            branch 'hotfix-*'
                            branch 'release-*'
                            branch 'development'
                        }
                    }
                    steps {
                        sh 'mvn -B site-deploy'
                        script {
                            if (dataDir != null) {
                                sh "ln -Tsf ${params.MAVEN_SITES_DIR}/gemma/gemma-${gemmaVersion} ${dataDir}/gemma-devsite"
                                sh "ln -Tsf ${params.MAVEN_SITES_DIR}/baseCode/baseCode-${baseCodeVersion} ${dataDir}/baseCode-site"
                            }
                        }
                    }
                }
                stage('Deploy Gemma Web') {
                    when {
                        anyOf {
                            branch 'master'
                            // we only support one staging server
                            branch params.STAGING_BRANCH + '-*'
                            branch 'development'
                        }
                    }
                    steps {
                        sh "rsync gemma-web/src/main/config/log4j.properties ${deployDir}/lib/log4j.properties"
                        sh "rsync gemma-web/target/Gemma.war ${deployDir}/Gemma.war"
                    }
                }
                stage('Deploy Gemma CLI') {
                    when {
                        anyOf {
                            branch 'master'
                            branch 'hotfix-*'
                            branch 'release-*'
                            // never deploy the development CLI, it's too risky
                        }
                    }
                    steps {
                        sh "rsync -av --delete gemma-cli/target/appassembler/ ${cliDir}/"
                        script {
                            if (cliDirSymlink != null) {
                                sh "ln -Tsf ${cliDir} ${cliDirSymlink}"
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        fixed {
            slackSend color: 'good', message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} Back to normal (<${env.BUILD_URL}|Open>)"
        }
        unsuccessful {
            slackSend color: 'danger', message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} Failure (<${env.BUILD_URL}|Open>)"
        }
    }
}
