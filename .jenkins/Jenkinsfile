// TODO: move those into environment variables supplied by Jenkins
def siteDir = '/space/web/maven-sites'
def productionDeployDir = 'moe:/var/local/tomcat/gemma'
def productionDataDir = '/space/gemmaData'
def developmentDeployDir = 'chalmers:/var/local/tomcat/gemma'
def developmentDataDir = '/space/sandboxgemmaData'
def stagingDeployDir = 'chalmers:/var/local/tomcat/gemma-staging'
def stagingDataDir = '/space/staginggemmaData'
def productionCliDir = '/space/grp/gemma-cli'

def gemmaVersion
def testdbUrl
def dataDir
def gemmaSiteDir
def baseCodeSiteDir
def deployDir
def cliDir

void setBuildStatus(String context, String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/PavlidisLab/Gemma"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: context],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ])
}

pipeline {
    agent any
    tools {
        maven 'Maven 3.8.1'
    }
    stages {
        stage('Checkout scm') {
            steps {
                checkout scm
                script {
                    def pom = readMavenPom()
                    testdbUrl = pom.properties['gemma.testdb.build.url']
                    gemmaVersion = pom.version
                    if (env.BRANCH_NAME == "master" && gemmaVersion.endsWith("-SNAPSHOT")) {
                        error("A production build must not have a -SNAPSHOT suffix.")
                    }
                    if (env.BRANCH_NAME == "development" && !gemmaVersion.endsWith("-SNAPSHOT")) {
                        error("A development build must have a -SNAPSHOT suffix.")
                    }
                    def baseCodeVersion
                    for (dep in pom.dependencies) {
                        if (dep.groupId == 'baseCode' && dep.artifactId == 'baseCode') {
                            baseCodeVersion = dep.version
                            break
                        }
                    }
                    if (baseCodeVersion == null) {
                        error('The baseCode dependency was not found in pom.xml.')
                    }
                    gemmaSiteDir = siteDir + '/gemma/gemma-' + gemmaVersion
                    baseCodeSiteDir = siteDir + '/baseCode/baseCode-' + baseCodeVersion
                    if (env.BRANCH_NAME == 'master') {
                        dataDir = productionDataDir
                        deployDir = productionDeployDir
                        cliDir = productionCliDir
                    } else if (env.BRANCH_NAME == 'development') {
                        dataDir = developmentDataDir
                        deployDir = developmentDeployDir
                        // no CLI should be deployed
                    } else if (env.BRANCH_NAME =~ '^(hotfix|release)-.*') {
                        dataDir = stagingDataDir
                        deployDir = stagingDeployDir
                        cliDir = productionCliDir + '-' + gemmaVersion
                    } else {
                        // no deployment should occur
                    }
                }
            }
        }
        stage('Build') {
            steps {
                setBuildStatus "Build", "Build #${env.BUILD_NUMBER} has started...", 'PENDING'
                sh 'mvn -B package -DskipTests'
            }
            post {
                success {
                    archiveArtifacts artifacts: '**/target/*.jar, **/target/*.war', fingerprint: true
                    setBuildStatus "Build", "Build #${env.BUILD_NUMBER} succeeded.", 'SUCCESS'
                }
                failure {
                    setBuildStatus "Build", "Build #${env.BUILD_NUMBER} failed.", 'ERROR'
                }
                unstable {
                    setBuildStatus "Build", "Build #${env.BUILD_NUMBER} failed.", 'FAILURE'
                }
            }
        }
        stage('Run quick unit tests') {
            steps {
                setBuildStatus "Tests", "Tests for build #${env.BUILD_NUMBER} have started...", 'PENDING'
                sh 'mvn -B test -DexcludedGroups=SlowTest'
            }
            post {
                always {
                    junit testResults: '**/target/surefire-reports/*.xml'
                }
                success {
                    setBuildStatus "Tests", "Tests for build #${env.BUILD_NUMBER} have passed.", 'SUCCESS'
                }
                failure {
                    setBuildStatus "Tests", "Tests for build #${env.BUILD_NUMBER} failed.", 'ERROR'
                }
                unstable {
                    setBuildStatus "Tests", "Tests for build #${env.BUILD_NUMBER} failed.", 'FAILURE'
                }
            }
        }
        stage('Notify a new release is out') {
            when {
                branch 'master'
            }
            steps {
                slackSend color: 'good', channel: '#gemma', message: "Gemma ${gemmaVersion} has been released! It will be deployed shortly..."
            }
        }
        stage('Run remaining tests and perform deployment in parallel') {
            when {
                anyOf {
                    branch 'master'
                    branch 'hotfix-*'
                    branch 'release-*'
                    branch 'development'
                }
            }
            parallel {
                stage('Run slow unit tests') {
                    when {
                        anyOf {
                            branch 'hotfix-*'
                            branch 'release-*'
                            branch 'development'
                        }
                    }
                    steps {
                        setBuildStatus "Slow tests", "Slow tests for build #${env.BUILD_NUMBER} have started...", 'PENDING'
                        sh 'mvn -B test -Dgroups=SlowTest'
                    }
                    post {
                        always {
                            junit testResults: '**/target/surefire-reports/*.xml'
                        }
                        success {
                            setBuildStatus "Slow tests", "Slow tests for build #${env.BUILD_NUMBER} have passed.", 'SUCCESS'
                        }
                        failure {
                            setBuildStatus "Slow tests", "Slow tests for build #${env.BUILD_NUMBER} failed.", 'ERROR'
                        }
                        unstable {
                            setBuildStatus "Slow tests", "Slow tests for build #${env.BUILD_NUMBER} failed.", 'FAILURE'
                        }
                    }
                }
                stage('Run integration tests') {
                    when {
                        anyOf {
                            branch 'hotfix-*'
                            branch 'release-*'
                            branch 'development'
                        }
                    }
                    steps {
                        setBuildStatus "Integration tests", "Integration tests for build #${env.BUILD_NUMBER} have started...", 'PENDING'
                        sh 'mvn -B test -Dgroups=SlowTest'
                        lock('database/' + testdbUrl) {
                            sh 'mvn -B verify -DskipUnitTests'
                        }
                    }
                    post {
                        always {
                            junit testResults: '**/target/failsafe-reports/*.xml'
                        }
                        success {
                            setBuildStatus "Integration tests", "Integration tests for build #${env.BUILD_NUMBER} have passed.", 'SUCCESS'
                        }
                        failure {
                            setBuildStatus "Integration tests", "Integration tests for build #${env.BUILD_NUMBER} failed.", 'ERROR'
                        }
                        unstable {
                            setBuildStatus "Integration tests", "Integration tests for build #${env.BUILD_NUMBER} failed.", 'FAILURE'
                        }
                    }
                }
                stage('Deploy artifacts') {
                    when {
                        anyOf {
                            branch 'master'
                            branch 'development'
                        }
                    }
                    steps {
                        sh 'mvn -B deploy -DskipTests'
                    }
                }
                stage ('Deploy Maven website') {
                    when {
                        anyOf {
                            branch 'master'
                            branch 'hotfix-*'
                            branch 'release-*'
                            branch 'development'
                        }
                    }
                    steps {
                        sh 'mvn -B site-deploy'
                        sh "ln -sf ${gemmaSiteDir} ${dataDir}/gemma-devsite"
                        sh "ln -sf ${baseCodeSiteDir} ${dataDir}/basecode-site"
                    }
                }
                stage ('Deploy Gemma Web') {
                    when {
                        anyOf {
                            branch 'master'
                            branch 'hotfix-*'
                            branch 'release-*'
                            branch 'development'
                        }
                    }
                    steps {
                        sh "rsync gemma-web/src/main/config/log4j.properties ${deployDir}/lib/log4j.properties"
                        sh "rsync gemma-web/target/Gemma.war ${deployDir}/Gemma.war"
                    }
                }
                stage ('Deploy Gemma CLI') {
                    when {
                        anyOf {
                            branch 'master'
                            branch 'hotfix-*'
                            branch 'release-*'
                        }
                    }
                    steps {
                        sh "rsync -adv gemma-cli/target/appassembler ${cliDir}"
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                if (env.BRANCH_NAME == "master") {
                    slackSend color: 'good', message: "Gemma ${gemmaVersion} has been deployed! Enjoy it while it's still warm!"
                }
            }
        }
        fixed {
            slackSend color: 'good', message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} Back to normal (<${env.BUILD_URL}|Open>)"
        }
        unstable {
            slackSend color: 'danger', message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} Failure (<${env.BUILD_URL}|Open>)"
        }
    }
}
